#include <hidef.h> /* for EnableInterrupts macro */
#include "derivative.h" /* include peripheral declarations */

#define VTPM2CH0 12
#define VTPM2CH1 13
#define encM1A PTGD_PTGD0
#define encM1B PTGD_PTGD1
#define encM2A PTGD_PTGD2
#define encM2B PTGD_PTGD3
#define VRTI 25
#define VSCI 20

int FrecPWM = 23000; // periodo del PWM en ms
int util;
char contadorM1;
char contadorM2;

char valor;
int recibido=0;
/////////////////////////////////
int Kp=10;
int Ki=10;
int periodo=23;
int nominal=0;
int summax=100;
int util_c=0;
int TRTI=0.032;
char control;

int velocidad_1;
int referencia_1;
int error1_1;
int error0_1;
int val_1;
int sum_1;
int u_1;

int velocidad_2;
int referencia_2;
int error1_2;
int error0_2;
int val_2;
int sum_2;
int u_2;
////////////////////////////////////////



void conf_TPM(void);
void conf_SCI(void);
void conf_RTI(void);
void pwm_1_0(int a);
void pwm_1_1(int a);
void pwm_2_0(int a);
void pwm_2_1(int a);
void com(char x);
void retardo(int cont);


void main(void) {

	/* include your code here */
	SOPT = 0x40;

	PTGDD_PTGDD0=0;
	PTGDD_PTGDD1=0;
	PTGDD_PTGDD2=0;
	PTGDD_PTGDD3=0;

	PTFDD_PTFDD4=0;
	PTFDD_PTFDD5=0;
	PTFPE_PTFPE4=0;
	PTFPE_PTFPE5=0;

	conf_TPM();
	conf_SCI();
	conf_RTI();
	contadorM1=0;
	contadorM2=0;

	EnableInterrupts;

	FrecPWM = 23000;
	util = 50;

	//pwm_1_0(util);


	for(;;) {

		/*
	  valor=ADC1RL;
	  	  retardo(10);
	  com(valor);*/
	}
}

void conf_TPM(){
	//
	// CPWMS = PWM centrado
	// CLKSA = Fuente de reloj BUSCLK
	// PS1 = Divisor de 4, reloj a 1kHz

	TPM1SC = (TPM1SC_CLKSA_MASK | TPM1SC_PS1_MASK);

	// Medio periodo
	TPM1MOD = 43;

	// PWM centrado, High-true pulses (clear output on compare)
	TPM1C0SC = (TPM1C0SC_MS0B_MASK | TPM1C0SC_ELS0B_MASK);
	TPM1C1SC = (TPM1C1SC_MS1B_MASK | TPM1C1SC_ELS1B_MASK);
	TPM1C2SC = (TPM1C2SC_MS2B_MASK | TPM1C2SC_ELS2B_MASK);
	TPM1C3SC = (TPM1C3SC_MS3B_MASK | TPM1C3SC_ELS3B_MASK);
	//ciclo util
	TPM1C0V = 0;
	TPM1C1V = 0;
	TPM1C2V = 0;
	TPM1C3V = 0;

	//Conf lectura encoders:
	TPM2SC = (TPM2SC_CLKSA_MASK | TPM2SC_PS1_MASK);

	TPM2C0SC = (TPM2C0SC_ELS0A_MASK | TPM2C0SC_CH0IE_MASK);
	TPM2C1SC = (TPM2C1SC_ELS1A_MASK | TPM2C1SC_CH1IE_MASK);

}

void pwm_1_0(int a) {
	TPM1C0V =(short)((a*43)/100);
	// debe estar en milisegundos, la división se debe a la programación de módulo TPM
}
void pwm_1_1(int a) {
	TPM1C1V =(short)((a*43)/100);
	// debe estar en milisegundos, la división se debe a la programación de módulo TPM
}
void pwm_2_0(int a) {
	TPM1C2V =(short)((a*43)/100);
	// debe estar en milisegundos, la división se debe a la programación de módulo TPM
}
void pwm_2_1(int a) {
	TPM1C3V =(short)((a*43)/100);
	// debe estar en milisegundos, la división se debe a la programación de módulo TPM
}

void conf_SCI(void) {
	////*****************************************
	// comunicacion a 9600 baudios
	// SCI baud rate = BUSCLK/(16xBR)
	// BUSCLK = 4MHz
	// 9600= 4.000.000/(16*26)
	// SBR=0000000011010
	////******************************
	SCI1BDH = 0x00;
	SCI1BDL = 0b00011010;
	////*****************
	//
	//7 LOOPS =0 RxD and TxD use separate pins.
	//6 SCISWAI =0 SCI clocks continue to run in wait mode so the SCI can be the source of an interrupt that wakes up the CPU
	//5 RSRC =0 This bit has no meaning or effect unless the LOOPS bit is set to 1
	//4 M =0 Bit or 8-Bit Mode Select, Normal — start + 8 data bits (LSB First) + stop.
	//3 WAKE =0 Idle-line wakeup
	//2 ILT =0 Idle character bit count starts after start bit.
	//1 PE =0 No hardware parity generation or checking.
	//0 PT =0 Even parity.
	////*****************

	SCI1C1 = 0x00;

	////*******
	//
	//7 TIE =0 Transmit Interrupt Enable (for TDRE), Hardware interrupts from TDRE disabled (use polling).
	//6 TCIE =0 Transmission Complete Interrupt Enable (for TC), Hardware interrupts from TC disabled (use polling).
	//5 RIE =1 Receiver Interrupt Enable (for RDRF), Hardware interrupts from RDRF enabled.
	//4 ILIE =0 Idle Line Interrupt Enable (for IDLE), Hardware interrupts from IDLE disabled (use polling)
	//3 TE =1 Transmitter on.
	//2 RE =1 Receiver on.
	//1 RWU =0 Normal SCI receiver operation.
	//0 SBK =0 Normal transmitter operation.
	////*******
	SCI1C2 = (SCI2C2_TE_MASK);
}


/////////////////////////////////////////////////////////////////////////////////
//
//	bit5=1 usa señal de reloj externo 
//	bit4=1 interrupciones RTI activadas
//	bits 2:0 = 000 perido de 8 ms
/////////////////////////////////////////////////////////////////////////////////
void conf_RTI(void) {
	SRTISC =(SRTISC_RTIS1_MASK | SRTISC_RTIE_MASK | SRTISC_RTIACK_MASK);
}

interrupt VRTI void rutina_RTI(void) {
	SRTISC = (SRTISC | SRTISC_RTIACK_MASK);	
	
	velocidad_1=contadorM1; // [rev/seg]
	referencia_1=10; 
	error1_1 = error0_1;	//actualización del error
	error0_1 = referencia_1 - velocidad_1;
	val_1 = sum_1 + (error0_1 * TRTI); //Cálculo de la integral del error
	if ((val_1 < summax) && (val_1 > -1 * summax)) { //limitación del acomulador para el integrador
		sum_1 += error0_1 * TRTI; 
	}
	nominal = Kp * error0_1 + sum_1 * Ki; //señal de control nominal, 
	util_c = (int) ((periodo * 0.01) * (nominal)); //actualización del ciclo util de acuerdo a la configuración de PWM
	u_1=u_1+util_c;
	if(u_1>90){
		u_1=90;	
	}
	pwm_1_1(u_1);
	//cambia_ciclo_util(util);
	
	velocidad_2=contadorM2; // [rev/seg]
		referencia_2=referencia_1*(1.1); 
		error1_2 = error0_2;	//actualización del error
		error0_2 = referencia_2 - velocidad_2;
		val_2 = sum_2 + (error0_2 * TRTI); //Cálculo de la integral del error
		if ((val_2 < summax) && (val_2 > -1 * summax)) { //limitación del acomulador para el integrador
			sum_2 += error0_2 * TRTI; 
		}
		nominal = Kp * error0_2 + sum_2 * Ki; //señal de control nominal, 
		util_c = (int) ((periodo * 0.01) * (nominal)); //actualización del ciclo util de acuerdo a la configuración de PWM
		u_2=u_2+util_c;
		if(u_2>90){
			u_2=90;	
		}
		pwm_2_0(u_2);
	
	
	
	
	
	com(contadorM1);
	contadorM1=0;
	contadorM2=0;



}

void configuracion_ADC(){
	////***************
	// Conversion complete interrupt disabled
	// Continuous Conversion Enable
	////**********


	////***************
	// High speed configuration
	// internal clock ADCK = Input clock
	// Short Sample Time Configuration
	// 8-bit conversion mode (N=8)
	// Input clock =Bus CLock
	////**********
	ADC1CFG = 0x00;

	////***************
	// Input Channel Select = 
	////**********
	ADC1SC1 = (ADC1SC1_ADCO_MASK|ADC1SC1_ADCH1_MASK); 

	retardo(1000); // Espera que se estabilice el ADC
}

interrupt VTPM2CH1 void rutina_tpm21(void) {
	TPM2C1SC_CH1F=0;
	if (encM2A == encM2A) { 
		contadorM2++;
	}else{
		contadorM2--;
	}
	//Encoder de cuadratura, el sentido de giro se lee por la diferencia en el signo de las señales
}

interrupt VTPM2CH0 void rutina_tpm20(void) {
	TPM2C0SC_CH0F=0;
	if (encM1A == encM1B) { 
		contadorM1++;
	}else{
		contadorM1--;
	}
	//Encoder de cuadratura, el sentido de giro se lee por la diferencia en el signo de las señales
}


void com(char x){
	SCI1D = x;
	while (SCI1S1_TC == 0) {
	}
}

////*******Interrupción por recepción de datos sci_RX
//Se asigna la lectura al valor de la referencia
////*******

void retardo(int cont){
	int n;
	for(n=0; n<cont; cont++);
}
